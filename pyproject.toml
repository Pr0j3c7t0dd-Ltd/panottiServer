[tool.poetry]
name = "panotti-server"
version = "1.0.0"
description = "Recording Events API Server"
authors = ["Your Name <your.email@example.com>"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "0.115.6"
uvicorn = "0.34.0"
gunicorn = "23.0.0"
python-jose = "3.3.0"
python-multipart = "0.0.20"
python-dotenv = "1.0.1"
httpx = ">=0.27.0,<0.28.0"
typing-extensions = "4.12.2"
requests = "2.32.3"
pydantic = "2.10.5"
PyYAML = "6.0.2"
structlog = "25.1.0"
python-json-logger = "3.2.1"
aiosqlite = "0.20.0"
asyncio = "3.4.3"
watchdog = "6.0.0"
importlib-metadata = "8.5.0"
numpy = "2.2.1"
scipy = "1.15.1"
sqlalchemy = "2.0.37"
av = {version = "^11.0.0", markers = "python_version >= '3.12'"}
faster-whisper = "1.1.1"
ollama = "0.4.6"
torchaudio = "2.5.1"
soundfile = "0.13.0"
aiohttp = "3.11.11"
aiohappyeyeballs = "2.4.4"
aiosignal = "1.3.2"
annotated-types = "0.7.0"
anthropic = "0.43.0"
anyio = "4.8.0"
astroid = "3.3.8"
attrs = "24.3.0"
bcrypt = "4.2.1"
cachetools = "5.5.0"
certifi = "2024.12.14"
cffi = "1.17.1"
cfgv = "3.4.0"
charset-normalizer = "3.4.1"
click = "8.1.8"
coloredlogs = "15.0.1"
coverage = "7.6.10"
cryptography = "44.0.0"
ctranslate2 = "4.5.0"
dill = "0.3.9"
distlib = "0.3.9"
distro = "1.9.0"
ecdsa = "0.19.0"
filelock = "3.16.1"
flatbuffers = "24.12.23"
frozenlist = "1.5.0"
fsspec = "2024.12.0"
google-api-core = "2.24.0"
google-api-python-client = "2.159.0"
google-auth = "2.37.0"
google-auth-httplib2 = "0.2.0"
google-generativeai = "0.8.3"
googleapis-common-protos = "1.66.0"
grpcio = "1.69.0"
grpcio-status = "1.69.0"
h11 = "0.14.0"
httpcore = "1.0.7"
httplib2 = "0.22.0"
huggingface-hub = "0.27.1"
humanfriendly = "10.0"
identify = "2.6.5"
idna = "3.10"
iniconfig = "2.0.0"
isort = "5.13.2"
jinja2 = "3.1.5"
jiter = "0.8.2"
markupsafe = "3.0.2"
mccabe = "0.7.0"
mpmath = "1.3.0"
multidict = "6.1.0"
mypy = "1.14.1"
mypy-extensions = "1.0.0"
networkx = "3.4.2"
nodeenv = "1.9.1"
onnxruntime = "1.20.1"
openai = "1.59.7"
packaging = "24.2"
passlib = "1.7.4"
pathspec = "0.12.1"
platformdirs = "4.3.6"
pluggy = "1.5.0"
pre-commit = "4.0.1"
propcache = "0.2.1"
proto-plus = "1.25.0"
protobuf = "5.29.3"
pyasn1 = "0.6.1"
pyasn1-modules = "0.4.1"
pycparser = "2.22"
pydantic-core = "2.27.2"
pylint = "3.3.3"
pyparsing = "3.2.1"
pytest-mock = "3.14.0"
rsa = "4.9"
setuptools = "75.8.0"
six = "1.17.0"
sniffio = "1.3.1"
sympy = "1.13.1"
tokenizers = "0.21.0"
tomlkit = "0.13.2"
torch = "2.5.1"
tqdm = "4.67.1"
types-pyyaml = "6.0.12.20241230"
types-requests = "2.32.0.20241016"
uritemplate = "4.1.1"
urllib3 = "2.3.0"
virtualenv = "20.29.0"
yarl = "1.18.3"
zipp = "3.21.0"
black = "24.10.0"
flake8 = "7.1.1"
pytest = "8.3.4"
pytest-asyncio = "0.25.2"
pytest-cov = "6.0.0"
ruff = "0.9.2"
starlette = ">=0.40.0,<0.42.0"
pytz = "2024.1"
pytest-timeout = "^2.3.1"

[tool.poetry.group.dev.dependencies]
pytest-mock = "^3.12.0"
coverage = "^7.3.2"
isort = "^5.13"
mypy = "^1.8.0"
pylint = "^3.0"
pre-commit = "^4.0.1"
types-pyyaml = "^6.0.12.20241230"
types-requests = "^2.32.0.20241016"
aioresponses = "^0.7.7"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore certain errors in test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Ignore missing imports for certain packages
[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "scipy.*",
    "numpy.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic.*"
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = "sqlalchemy.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=app --cov-report=term-missing"

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [".coveragerc"]

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF"]
ignore = [
    "PLR0913",  # Too many arguments
    "E501",     # Line too long
    "PLR0915",  # Too many statements
    "PLR0912",  # Too many branches
    "PLW0603",  # Global statement usage
    "PLR2004",  # Magic numbers in comparisons
    "PLR0911",  # Too many return statements
    "UP038",    # Use X | Y in isinstance
    "PLW2901"   # Loop variable overwritten
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["PLR2004"]  # Ignore magic numbers in test files
"app/tests/*" = ["PLR2004"]  # Ignore magic numbers in test files

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pycodestyle]
max-line-length = 88

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`
keep-runtime-typing = true

[tool.bandit]
# Directories to exclude from analysis
exclude_dirs = ["tests", "test_*", ".venv", ".git", "__pycache__", ".pytest_cache"]

# Tests to skip
skips = [
    "B101",  # Allow assert statements in tests
    "B311"   # Allow random number generators (not for cryptography)
]

# Severity level (LOW, MEDIUM, HIGH)
severity = "MEDIUM"

# Confidence level (LOW, MEDIUM, HIGH)
confidence = "MEDIUM"

# Number of lines of context to display for issues
show_context = true
show_lineno = true

# Output format
output_format = "screen"

# Set a baseline to track only new security issues
# baseline = "bandit-baseline.json"
